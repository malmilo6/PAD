version: '3.8'

services:
  mongodb:
    image: mongo
    restart: always
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
      - ./data-db:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongoadmin
      MONGO_INITDB_DATABASE: db_uas
    ports:
      - "27017:27017"
    networks:
      - my_network

  db_wds:
    container_name: mysql-container-wds
    image: mysql:8.0
    restart: always
    command: mysqld --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${SQL_ROOT_PASSWORD}
      MYSQL_USER: ${SQL_USER}
      MYSQL_PASSWORD: ${SQL_PASSWORD}
      MYSQL_DATABASE: ${SQL_DATABASE_WDS}
    volumes:
      - ./mysql_wds_data:/var/lib/mysql
    ports:
      - "${SQL_PORT_WDS}:3306"
    networks:
      - my_network
  db_wds_replica:
    container_name: mysql-container-wds-replica
    image: mysql:8.0
    restart: always
    command: mysqld --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${SQL_ROOT_PASSWORD}
      MYSQL_USER: ${SQL_USER}
      MYSQL_PASSWORD: ${SQL_PASSWORD}
      MYSQL_DATABASE: ${SQL_DATABASE_WDS}
    volumes:
      - ./mysql_wds_data_replica:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - my_network



  user_alert_service:
    container_name: django-user-alert-service
    build:
      context: ./user_alert_service
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8001
    volumes:
      - ./user_alert_service/:/usr/src/app
    env_file:
      - .env
    ports:
      - "8001:8001"
    depends_on:
      - mongodb
    environment:
      - SERVICE_IP=127.0.0.1
      - SERVICE_PORT=8001
      - SERVICE_NAME=django-user-alert-service
    networks:
      - my_network

  user_alert_service-2:
    container_name: django-user-alert-service-2
    build:
      context: ./user_alert_service
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8002
    volumes:
      - ./user_alert_service/:/usr/src/app
    env_file:
      - .env
    ports:
      - "8002:8002"
    depends_on:
      - mongodb
    environment:
      - SERVICE_IP=127.0.0.1
      - SERVICE_PORT=8002
      - SERVICE_NAME=django-user-alert-service-2
    networks:
      - my_network

  user_alert_service-3:
    container_name: django-user-alert-service-3
    build:
      context: ./user_alert_service
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8003
    volumes:
      - ./user_alert_service/:/usr/src/app
    env_file:
      - .env
    ports:
      - "8003:8003"
    depends_on:
      - mongodb
    environment:
      - SERVICE_IP=127.0.0.1
      - SERVICE_PORT=8003
      - SERVICE_NAME=django-user-alert-service-3
    networks:
      - my_network

  weather_data_service:
    container_name: django-weather-data-service
    build:
      context: ./weather_data_service
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./weather_data_service/:/usr/src/app
    env_file:
      - .env
    ports:
      - "8000:8000"
      - "50052:50051" # gRPC port
    depends_on:
      - db_wds
      - db_wds_replica
    networks:
      - my_network


  redis-node-1:
    image: redis:latest
    ports:
      - "7000:7000"
    networks:
      - my_network
    hostname: redis-node-1
    volumes:
      - ./redis/node_1:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7000 --cluster-announce-bus-port 17000"
    expose:
      - "7000"
      - "17000"

  redis-node-2:
    image: redis:latest
    networks:
      - my_network
    hostname: redis-node-2
    volumes:
      - ./redis/node_2:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7001 --cluster-announce-bus-port 17001"
    expose:
      - "7001"
      - "17001"

  redis-node-3:
    image: redis:latest
    networks:
      - my_network
    hostname: redis-node-3
    volumes:
      - ./redis/node_3:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7002 --cluster-announce-bus-port 17002"
    expose:
      - "7002"
      - "17002"

  redis-node-4:
    image: redis:latest
    networks:
      - my_network
    hostname: redis-node-4
    volumes:
      - ./redis/node_4:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7003 --cluster-announce-bus-port 17003"
    expose:
      - "7003"
      - "17003"

  redis-node-5:
    image: redis:latest
    networks:
      - my_network
    hostname: redis-node-5
    volumes:
      - ./redis/node_5:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7004 --cluster-announce-bus-port 17004"
    expose:
      - "7004"
      - "17004"

  redis-node-6:
    image: redis:latest
    networks:
      - my_network
    hostname: redis-node-6
    volumes:
      - ./redis/node_6:/redis
    command: sh -c "redis-server /redis/redis.conf --cluster-announce-ip $(hostname -i) --cluster-announce-port 7005 --cluster-announce-bus-port 17005"
    expose:
      - "7005"
      - "17005"

  redis-cluster-creator:
    image: redis:latest
    networks:
      - my_network
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    command: sh -c "sleep 10; redis-cli --cluster create \
      redis-node-1:7000 \
      redis-node-2:7001 \
      redis-node-3:7002 \
      redis-node-4:7003 \
      redis-node-5:7004 \
      redis-node-6:7005 \
      --cluster-replicas 1 --cluster-yes"

  service_discovery:
    build:
      context: ./service_discovery
      dockerfile: Dockerfile
    ports:
      - "5001:5000"
    depends_on:
      - user_alert_service
      - weather_data_service
    networks:
      - my_network

  nginx_load_balancer:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - user_alert_service
      - user_alert_service-2
      - user_alert_service-3
    networks:
      - my_network

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - user_alert_service
      - weather_data_service
      - redis-node-1
      - nginx_load_balancer
    networks:
      - my_network


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - my_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "4000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - my_network

networks:
  my_network:
    driver: bridge
